---

- name: Manage system groups
  become: yes
  group:
    name: "{{ item.name }}"
    system: "{{ item.system | default(omit) }}"
  with_items: "{{ users_and_groups.groups }}"

- name: Ensure /etc/sudoers.d exists
  become: yes
  file:
    path: /etc/sudoers.d
    state: directory
    owner: root
    group: root
    mode: 0750

- name: Enable include of /etc/sudoers.d
  become: yes
  lineinfile:
    name: /etc/sudoers
    regexp: "^#includedir"
    line: "#includedir /etc/sudoers.d"
    state: present

- name: Create sudoers configure
  become: yes
  template:
    src: sudoers.j2
    dest: "/etc/sudoers.d/{{ item.name }}"
  with_items: "{{ users_and_groups.sudoers }}"

- name: Manage systems users
  become: yes
  user:
    comment: "{{ item.gecos | default(item.name) }}"
    createhome: "{{ item.createhome | default('yes') }}"
    home: "{{ item.home | default('/home/' ~ item.name) }}"
    group: "{{ item.group | default(omit) }}"
    groups: "{{ item.groups | default([ ]) | join(',') | default(omit) }}"
    name: "{{ item.name }}"
    password: "{{ item.password | default(omit) }}"
    shell: "{{ item.shell | default('/bin/bash') }}"
    state: "{{ item.state | default(omit) }}"
  with_items: "{{ users_and_groups.users }}"
  when: (not users_and_groups.whitelist_groups)
    or ( item.groups is defined and ( item.groups | intersect(users_and_groups.whitelist_groups )))
    or ( item.group is defined and item.group in users_and_groups.whitelist_groups)

- name: Update home directory permissions
  become: yes
  file:
    group: "{{ item.group | default(omit) }}"
    mode: 0750
    owner: "{{ item.name }}"
    path: "{{ item.home | default('/home/' ~ item.name) }}"
    state: directory
  with_items: "{{ users_and_groups.users }}"
  when: (item.state is not defined or item.state != absent)
    and (item.createhome is not defined or item.createhome)
    and (
      (not users_and_groups.whitelist_groups)
      or ( item.groups is defined and ( item.groups | intersect(users_and_groups.whitelist_groups )))
      or ( item.group is defined and item.group in users_and_groups.whitelist_groups)
    )

- name: Copy ssh auth keys to user home directory
  become: yes
  authorized_key:
    user: "{{ item.name }}"
    key: "{{ lookup('file', item.ssh_key) }}"
    manage_dir: yes
  with_items: "{{ users_and_groups.users }}"
  when: (users_and_groups.authorized_keys_dir is not defined)
    and (item.state is not defined or item.state != absent)
    and (item.ssh_key is defined)
    and (
      (not users_and_groups.whitelist_groups)
      or (item.groups is defined and (item.groups | intersect(users_and_groups.whitelist_groups)))
      or (item.group is defined and item.group in users_and_groups.whitelist_groups)
    )

- name: Create authorized_keys directory
  become: yes
  file:
    path: "{{ users_and_groups.authorized_keys_dir }}"
    owner: "root"
    group: "root"
    mode: 0755
    state: directory
  when: users_and_groups.authorized_keys_dir is defined

- name: Copy ssh auth keys to authorized_keys directory
  become: yes
  authorized_key:
    user: "{{ item.name }}"
    key: "{{ lookup('file', item.ssh_key) }}"
    path: "{{ users_and_groups.authorized_keys_dir ~ '/' ~ item.name }}"
    manage_dir: no
  with_items: "{{ users_and_groups.users }}"
  when: (users_and_groups.authorized_keys_dir is defined)
    and (item.state is not defined or item.state != absent)
    and (item.ssh_key is defined)
    and (
      (not users_and_groups.whitelist_groups)
      or (item.groups is defined and (item.groups | intersect(users_and_groups.whitelist_groups)))
      or (item.group is defined and item.group in users_and_groups.whitelist_groups)
    )
